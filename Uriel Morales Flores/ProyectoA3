#PROGRAMA DE GRAFICACION COMPUTACIONAL
#6 DE DICIEMBRE DE 2023
#URIEL MORALES FLORES
#IMPLEMENTACION DE ALGORITMOS DEL LIBRO PARA GRAFICAR PAG 70 Y 80
import plotly

# Definiciones de tipos para trabajar con puntos 2D.
type
  Vector2 = tuple[x, y: float]
  Point2 = Vector2

# findSpan: Encuentra el rango del valor 'u' dentro del vector de nodos 'U'.
proc findSpan(n: int, p: int, u: float64, U: seq[float64]): int =
  # Caso especial cuando 'u' es igual al último valor del vector de nodos.
  if u == U[n + 1]:
    return n

  # Inicialización de variables para la búsqueda binaria.
  var low = p
  var high = n + 1
  var mid: int

  # Búsqueda binaria para encontrar el rango adecuado de 'u'.
  while u < U[mid] or u >= U[mid + 1]:
    if u < U[mid]:
      high = mid
    else:
      low = mid
    mid = (low + high) div 2

  return mid

# basisFuns: Calcula las funciones base para la curva B-Spline.
proc basisFuns(span: int, u: float64, p: int, U: seq[float64]): seq[float64] =
  var N: seq[float64]
  N.add(1)

  var left = newSeq[float64](p + 1)
  var right = newSeq[float64](p + 1)
  var saved: float64
  var temp: float64

  # Cálculo de las funciones base.
  for j in 1..p:
    left[j] = u - U[span + 1 - j]
    right[j] = U[span + j] - u

    saved = 0.0
    for r in 0..<j:
      if right[r + 1] == 0.0:
        temp = 0.0
      else:
        temp = N[r] / (right[r + 1] + left[j - r])
      N[r] = saved + temp * right[r + 1]
      saved = temp * left[j - r]

    N.add(saved)

  return N

# FINALIZACION DEL ALGORITMO A3.1
# CurvePoint(n,p,U,P,u,C)
# {/* Compute curve point *1
# 1* Input: n,p,U,P,u *1
# 1* Output: C *1
# span = FindSpan(n,p,u,U);
# BasisFuns(span,u,p,U,N);
# C = 0.0;
# for (i=O; i<=p; i++)
# C = C + N[i]*P[span-p+i];
# }

# curvePoint: Calcula un punto en la curva B-Spline dado un valor 'u'.
proc curvePoint(n: int, p: int, U: seq[float64],
                P: seq[Point2], u: float): Point2 =
  let span = findSpan(n, p, u, U)
  let N = basisFuns(span, u, p, U)

  var C: Point2
  C.x = 0
  C.y = 0

  # Suma ponderada de los puntos de control con las funciones base.
  for i in 0..p:
    let idx = span - p + i
    if idx >= 0 and idx < P.len:
      C.x += P[idx].x * N[i]
      C.y += P[idx].y * N[i]

  return C

# Función para graficar la curva resultante con Plotly.
proc plotCurve(n: int, p: int, U: seq[float64], P: seq[Point2]): auto =
  # Número de puntos para dibujar la curva.
  let numPoints = 100
  let deltaU = (U[n + 1] - U[p]) / float64(numPoints - 1)

  var xData: seq[float64]
  var yData: seq[float64]

  # Calcula los puntos de la curva y los agrega a las secuencias xData y yData.
  for i in 0..numPoints - 1:
    let u = U[p] + float64(i) * deltaU
    let point = curvePoint(n, p, U, P, u)
    xData.add(point.x)
    yData.add(point.y)

  # Creación de una traza para el gráfico.
  let scatterTrace = Trace[float64](mode: PlotMode.Lines,
      `type`: PlotType.Scatter)
  scatterTrace.xs = xData
  scatterTrace.ys = yData

  # Configuración del layout del gráfico.
  let layout = Layout(title: "Generación y Visualización de Curvas B-Spline en Nim",
                     width: 100, height: 200,
                     xaxis: Axis(title: "EJE DE LAS ABSCISAS Y"),
                     yaxis: Axis(title: "EJE DE LAS ORDENADAS X"))

  # Creación y visualización del gráfico.
  let plot = Plot[float64](layout: layout, traces: @[scatterTrace])
  echo plot.save()
  plot.show()

# Ejemplo para implementar la curva.
var
  U = @[0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0]
  P = @[(0.0, 0.0), (10.0, 2.0), (3.0, 4.0), (5.0, 20.0)]

# Llamada a la función para graficar.
plotCurve(3, 2, U, P)
